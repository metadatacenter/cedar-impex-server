package org.metadatacenter.submission.ncbi.amia;

import biosample.TypeAttribute;
import biosample.TypeBioSample;
import biosample.TypeBioSampleIdentifier;
import common.sp.*;
import generated.Submission;
import generated.TypeOrganization;
import generated.TypeTargetDb;
import org.metadatacenter.submission.AMIA2016DemoBioSampleTemplate;
import org.metadatacenter.submission.OptionalAttribute;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.io.StringWriter;
import java.util.GregorianCalendar;

/**
 * Convert a CEDAR JSON Schema-based AMIA 2016 demo template instance into a BioSample XML-based submission.
 */
public class AMIA2016DemoBioSampleTemplate2BioSampleConverter {
  /**
   * The {@link AMIA2016DemoBioSampleTemplate} class is generated by jsonschema2pojo from the
   * AMIA2016DemoBioSampleTemplate.json JSON Schema file in the resources directory.
   *
   * @param amia2016DemoBioSampleInstance An AMIA 2016 demo BioSample instance
   * @return A string containing a BioSample-conformant XML representation of the supplied submission
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   */
  public String generateBioSampleSubmissionXMLFromAMIA2016DemoBioSampleTemplateInstance(
      AMIA2016DemoBioSampleTemplate amia2016DemoBioSampleInstance) throws DatatypeConfigurationException,
      JAXBException {
    final generated.ObjectFactory objectFactory = new generated.ObjectFactory();
    final biosample.ObjectFactory bioSampleObjectFactory = new biosample.ObjectFactory();
    final common.sp.ObjectFactory spCommonObjectFactory = new common.sp.ObjectFactory();

    Submission xmlSubmission = objectFactory.createSubmission();

    // Submission/Description/Comment
    Submission.Description description = objectFactory.createSubmissionDescription();
    xmlSubmission.setDescription(description);
    description.setComment("Example CEDAR-generated BioSample submission using the Human.1.0 package");

    // Submission/Description/Hold/releaseDate
    Submission.Description.Hold hold = objectFactory.createSubmissionDescriptionHold();
    description.setHold(hold);
    hold.setReleaseDate(createXMLGregorianCalendar("2016-10-10")); // Hard coded release date

    // Submission/Description/Organization
    TypeOrganization organization = objectFactory.createTypeOrganization();
    description.getOrganization().add(organization);
    organization.setRole("master");
    organization.setType("institute");

    // Submission/Description/Organization/Name
    TypeOrganization.Name organizationName = objectFactory.createTypeOrganizationName();
    organization.setName(organizationName);
    organizationName.setValue("CEDAR"); // Hard coded organization name

    // Submission/Description/Organization/ContactInfo/email
    TypeContactInfo contactInfo = spCommonObjectFactory.createTypeContactInfo();
    organization.getContact().add(contactInfo);
    contactInfo.setEmail("metadatacenter@gmail.com"); // Hard coded email address

    // Submission/Description/Organization/ContactInfo/Name
    TypeName name = spCommonObjectFactory.createTypeName();
    contactInfo.setName(name);
    name.setFirst("Mr."); // Hard coded first name
    name.setLast("CEDAR"); // Hard coded last name

    // Submission/Action
    Submission.Action action = objectFactory.createSubmissionAction();
    xmlSubmission.getAction().add(action);

    // Submission/Action/AddData/target_db
    Submission.Action.AddData addData = objectFactory.createSubmissionActionAddData();
    action.setAddData(addData);
    addData.setTargetDb(TypeTargetDb.BIO_SAMPLE);

    // Submission/Action/AddData/Data/content_type
    Submission.Action.AddData.Data data = objectFactory.createSubmissionActionAddDataData();
    addData.setData(data);
    data.setContentType("XML");

    // Submission/Action/AddData/Data/XMLContent
    Submission.Action.AddData.Data.XmlContent xmlContent = objectFactory.createTypeInlineDataXmlContent();
    data.setXmlContent(xmlContent);

    // Submission/Action/AddData/Data/XMLContent/BioSample/schema_version
    TypeBioSample bioSample = bioSampleObjectFactory.createTypeBioSample();
    xmlContent.setBioSample(bioSample);
    bioSample.setSchemaVersion("2.0");

    // Submission/Action/AddData/Data/XMLContent/BioSample/SampleID
    TypeBioSampleIdentifier sampleID = bioSampleObjectFactory.createTypeBioSampleIdentifier();
    bioSample.setSampleId(sampleID);

    // Submission/Action/AddData/Data/XMLContent/BioSample/SampleID/SPUID
    TypeBioSampleIdentifier.SPUID spuid = bioSampleObjectFactory.createTypeBioSampleIdentifierSPUID();
    sampleID.getSPUID().add(spuid);
    spuid.setSpuidNamespace("CEDAR"); // Hard coded
    spuid.setValue(amia2016DemoBioSampleInstance.getSampleName().getValue());

    // Submission/Action/AddData/Data/XMLContent/BioSample/Descriptor
    TypeDescriptor descriptor = spCommonObjectFactory.createTypeDescriptor();
    bioSample.setDescriptor(descriptor);
    descriptor.setTitle("Example CEDAR-generated BioSample submission using the Human.1.0 package");

    // Submission/Action/AddData/Data/XMLContent/BioSample/Organism
    TypeOrganism organism = spCommonObjectFactory.createTypeOrganism();
    bioSample.setOrganism(organism);
    if (amia2016DemoBioSampleInstance.getOrganism().getRdfsLabel() != null) {
      organism.setOrganismName(amia2016DemoBioSampleInstance.getOrganism().getRdfsLabel());
    } else {
      organism.setOrganismName("");
    }

    // Submission/Action/AddData/Data/XMLContent/BioSample/BioProject
    TypeRefId bioProject = spCommonObjectFactory.createTypeRefId();
    bioSample.getBioProject().add(bioProject);

    // Submission/Action/AddData/Data/XMLContent/BioSample/BioProject/PrimaryID
    TypePrimaryId bioProjectPrimaryID = spCommonObjectFactory.createTypePrimaryId();
    bioProject.setPrimaryId(bioProjectPrimaryID);
    bioProjectPrimaryID.setDb("BioProject");
    bioProjectPrimaryID.setValue("PRJNA212117"); // Hard coded BioSample project ID

    // Submission/Action/AddData/Data/XMLContent/BioSample/Package
    bioSample.setPackage("Human.1.0"); // Hard coded BioSample package

    // Submission/Action/AddData/Data/XMLContent/BioSample/Attributes
    TypeBioSample.Attributes attributes = bioSampleObjectFactory.createTypeBioSampleAttributes();
    bioSample.setAttributes(attributes);

    // Submission/Action/AddData/Data/XMLContent/BioSample/Attributes/Attribute

    // Required attributes
    TypeAttribute attribute = bioSampleObjectFactory.createTypeAttribute();
    attributes.getAttribute().add(attribute);
    attribute.setAttributeName("isolate");
    attribute.setValue(amia2016DemoBioSampleInstance.getIsolate().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    attributes.getAttribute().add(attribute);
    attribute.setAttributeName("age");
    attribute.setValue(amia2016DemoBioSampleInstance.getAge().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    attributes.getAttribute().add(attribute);
    attribute.setAttributeName("sex");
    attribute.setValue(amia2016DemoBioSampleInstance.getSex().getRdfsLabel());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    attributes.getAttribute().add(attribute);
    attribute.setAttributeName("biomaterial provider");
    attribute.setValue(amia2016DemoBioSampleInstance.getBiomaterialProvider().getValue());

    attribute = bioSampleObjectFactory.createTypeAttribute();
    attributes.getAttribute().add(attribute);
    attribute.setAttributeName("tissue");
    attribute.setValue(amia2016DemoBioSampleInstance.getTissue().getRdfsLabel());

    for (OptionalAttribute optionalAttribute : amia2016DemoBioSampleInstance.getOptionalAttribute()) {
      attribute = bioSampleObjectFactory.createTypeAttribute();
      attributes.getAttribute().add(attribute);
      attribute.setAttributeName(optionalAttribute.getName().getValue());
      attribute.setValue(optionalAttribute.getValue().getValue());
    }
    StringWriter writer = new StringWriter();

    JAXBContext ctx = JAXBContext.newInstance(Submission.class);
    Marshaller marshaller = ctx.createMarshaller();
    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
    //marshaller.marshal(submissionRoot, System.out);
    marshaller.marshal(xmlSubmission, writer);

    return writer.toString();
  }

  private XMLGregorianCalendar createXMLGregorianCalendar(String date) throws DatatypeConfigurationException {
    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();
    GregorianCalendar gc = new GregorianCalendar();

    return datatypeFactory.newXMLGregorianCalendar(gc);
  }
}
